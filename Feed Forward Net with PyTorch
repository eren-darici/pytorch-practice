{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNUVASTj+kT92UDDFf1bevO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":18,"metadata":{"id":"AMqJp4iJ1hoR","executionInfo":{"status":"ok","timestamp":1689615355886,"user_tz":-180,"elapsed":3,"user":{"displayName":"Eren DARICI","userId":"16164594222995643781"}}},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torchvision\n","import torchvision.transforms as transforms\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["# Device configuration\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"],"metadata":{"id":"nJ8j_LFO1wqA","executionInfo":{"status":"ok","timestamp":1689615355886,"user_tz":-180,"elapsed":2,"user":{"displayName":"Eren DARICI","userId":"16164594222995643781"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["# Define hyper parameters\n","input_size = 784 # 28x28\n","hidden_size = 100\n","num_classes = 10\n","num_epochs = 2\n","batch_size = 100\n","learning_rate = 0.001"],"metadata":{"id":"n3rabVHP2ByA","executionInfo":{"status":"ok","timestamp":1689615355887,"user_tz":-180,"elapsed":3,"user":{"displayName":"Eren DARICI","userId":"16164594222995643781"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# Load the MNIST dataset\n","train_dataset = torchvision.datasets.MNIST(root='./data', train=True, transform=transforms.ToTensor(), download=True)\n","test_dataset = torchvision.datasets.MNIST(root='./data', train=False, transform=transforms.ToTensor())\n","\n","train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)\n","test_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=False)"],"metadata":{"id":"2M1s2cjL2OGc","executionInfo":{"status":"ok","timestamp":1689615356527,"user_tz":-180,"elapsed":259,"user":{"displayName":"Eren DARICI","userId":"16164594222995643781"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Take a look at the example data\n","examples = iter(train_loader)\n","samples, labels = next(examples)\n","print(samples.shape, labels.shape)\n","\n","for i in range(6):\n","  plt.subplot(2, 3, i+1)\n","  plt.imshow(samples[i][0], cmap='gray')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":428},"id":"JWdxnRv92zjj","executionInfo":{"status":"ok","timestamp":1689615357806,"user_tz":-180,"elapsed":737,"user":{"displayName":"Eren DARICI","userId":"16164594222995643781"}},"outputId":"4f16da41-8693-4def-f051-1649607e64f9"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([100, 1, 28, 28]) torch.Size([100])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 6 Axes>"],"image/png":"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UUQLTquqqiQQCMikSZPkww8/lB/84AcydepUOXjwoAwbNkxERO688075xS9+IeXl5eLz+WThwoUye/Zsee211/rlAmJtzpw5WtbbwjWrxZxWTwl99913oy/sHF6vV8uam5u1rKury/ZrnjhxQsuqqqoiqitRDYTedbIZM2Zo2be+9S3bxzc2NsaynIRC7/Y/j8cT0wznF9Hwce6jtsvKyiQjI0Nqa2vl6quvllAoJD/96U9l48aN8tWvflVERNavXy+XXnqp1NTUyFVXXRW7yoEI0LtwKnoXbhTVmo9QKCQiIunp6SIiUltbK52dnVJUVBTeZ8KECZKdnS3V1dWWr9He3i4tLS09NqC/0btwKnoXbtDn4aO7u1sWL14skydPlokTJ4rIRx+AlpycLGlpaT329fv9lh+OJvLR7zN9Pl94Gzt2bF9LAmyhd+FU9C7cos/DRyAQkLq6Otm0aVNUBSxbtkxCoVB4s3p4FhBL9C6cit6FW/TpCacLFy6U7du3y+7du3s85TMzM1M6Ojqkubm5xxTe1NQkmZmZlq/l9XotF0/Gy8e3ND/pk7czP+mXv/ylllktTv3Nb36jZS+++KLlax45ckTLsrOztWzx4sVaNn78eFs1ioj8+Mc/1rJrr71WywoLC7WsoqLC8jWdwM2962Q5OTla1ttCvoMHD2qZqScLxxO923+snpprlVk5depUrMsZECK686GUkoULF0pFRYXs2LFD+4GRl5cngwcPlsrKynBWX18vR44csfyfGGAKvQunonfhRhHd+QgEArJx40bZunWrpKSkhH+f6PP5ZOjQoeLz+WT+/PmyZMkSSU9Pl9TUVFm0aJEUFhay4hpxRe/CqehduFFEw8cTTzwhIiJTpkzpka9fv15uuukmERF59NFHJSkpSebMmSPt7e1SXFwsjz/+eEyKBfqK3oVT0btwo4iGDzu/AxsyZIiUlpZKaWlpn4sCYo3ehVPRu3AjPtsFAAAY1ad3uww0536Owsc+97nPadk//uM/atldd92lZbfffrvla1555ZVa9tvf/lbL3nzzTS2zekT14cOHLc9j5de//rXtfYG+mjVrlpbdd999to/fsWOHlvGQLMSLmx/t35+48wEAAIxi+AAAAEYxfAAAAKMYPgAAgFEsOI0xq8em9/YodWAg+uY3v6llw4YN07KTJ09aHv+9730v5jUB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\n"},"metadata":{}}]},{"cell_type":"code","source":["# Create network\n","class NeuralNet(nn.Module):\n","  def __init__(self, input_size, hidden_size, num_classes):\n","    super(NeuralNet, self).__init__()\n","    self.l1 = nn.Linear(input_size, hidden_size)\n","    self.relu = nn.ReLU()\n","    self.l2 = nn.Linear(hidden_size, num_classes)\n","\n","  def forward(self, x):\n","    out = self.l1(x)\n","    out = self.relu(out)\n","    out = self.l2(out)\n","    return out\n","\n","model = NeuralNet(input_size, hidden_size, num_classes)"],"metadata":{"id":"hnNrp6Wm3Dsu","executionInfo":{"status":"ok","timestamp":1689615357807,"user_tz":-180,"elapsed":6,"user":{"displayName":"Eren DARICI","userId":"16164594222995643781"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# Loss and optimizer\n","criterion = nn.CrossEntropyLoss() # this will also apply softmax\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)"],"metadata":{"id":"laidcYs-4yYO","executionInfo":{"status":"ok","timestamp":1689615358236,"user_tz":-180,"elapsed":3,"user":{"displayName":"Eren DARICI","userId":"16164594222995643781"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# Training Loop\n","n_total_steps = len(train_loader)\n","\n","for epoch in range(num_epochs):\n","  for i, (images, labels) in enumerate(train_loader):\n","    # 100, 1, 28, 28\n","    # 100, 784\n","    images = images.reshape(-1, 28*28).to(device)\n","    labels = labels.to(device)\n","\n","    # forward pass\n","    outputs = model(images)\n","    loss = criterion(outputs, labels)\n","\n","    # backward pass\n","    optimizer.zero_grad()\n","    loss.backward()\n","    optimizer.step()\n","\n","    if (i+1) % 100 == 0:\n","      print(f'Epoch {epoch+1}/{num_epochs}, Step {i+1}/{n_total_steps}, Loss={loss.item():.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FHkH2O4I5C9A","executionInfo":{"status":"ok","timestamp":1689615383482,"user_tz":-180,"elapsed":22979,"user":{"displayName":"Eren DARICI","userId":"16164594222995643781"}},"outputId":"eb202c32-e423-4755-92c9-c5701f5c546c"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/2, Step 100/600, Loss=0.4550\n","Epoch 1/2, Step 200/600, Loss=0.3089\n","Epoch 1/2, Step 300/600, Loss=0.2916\n","Epoch 1/2, Step 400/600, Loss=0.3917\n","Epoch 1/2, Step 500/600, Loss=0.1927\n","Epoch 1/2, Step 600/600, Loss=0.1624\n","Epoch 2/2, Step 100/600, Loss=0.1597\n","Epoch 2/2, Step 200/600, Loss=0.1680\n","Epoch 2/2, Step 300/600, Loss=0.2335\n","Epoch 2/2, Step 400/600, Loss=0.1785\n","Epoch 2/2, Step 500/600, Loss=0.1893\n","Epoch 2/2, Step 600/600, Loss=0.2003\n"]}]},{"cell_type":"code","source":["# Testing\n","with torch.no_grad():\n","  n_correct = 0\n","  n_samples = 0\n","\n","  for images, labels in test_loader:\n","    images = images.reshape(-1, 28*28).to(device)\n","    labels = labels.to(device)\n","    outputs = model(images)\n","\n","    # value, index\n","    _, predictions = torch.max(outputs, 1)\n","    n_samples += labels.shape[0]\n","    n_correct = (predictions == labels).sum().item()\n","\n","  acc = 100.0 * n_correct / n_samples\n","  print(f'Accuracy = {acc}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xU4wL4L-5Hpj","executionInfo":{"status":"ok","timestamp":1689615385620,"user_tz":-180,"elapsed":1613,"user":{"displayName":"Eren DARICI","userId":"16164594222995643781"}},"outputId":"25ae061a-c0e7-472b-c636-235bfc4858f1"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy = 0.94\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"zlGoquoY7I7j"},"execution_count":null,"outputs":[]}]}